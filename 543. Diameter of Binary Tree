/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    class Treeinfo{
        int ht;
        int diam;

        Treeinfo(int ht, int  diam){
            this.ht=ht;
            this.diam=diam;
        }
    }
    public Treeinfo diameter(TreeNode root){
        if(root==null){
            return new Treeinfo(0,0);
        }
        Treeinfo left = diameter(root.left);
        Treeinfo right = diameter(root.right);

        int height =  Math.max(left.ht,right.ht)+1;

        int diam1 = left.diam;
        int diam2 = right.diam;
        int diam3 = left.ht+right.ht+1;

        int diameter1 = Math.max(Math.max(diam1,diam2),diam3);
        
        Treeinfo info = new Treeinfo(height,diameter1);
        return info;
            
    }
    public int diameterOfBinaryTree(TreeNode root) {
       return  diameter(root).diam-1;
    }
}
